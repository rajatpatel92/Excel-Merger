/*
 * Excel-Merger App
 * Developed by :
 *  1. Rajat Patel
 *  2. Nikhil Menghani
 */
package excelmerger;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;

import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Rajat
 */
public class ExcelMergeGUI extends javax.swing.JFrame {
    /**
     * Creates new form ExcelMergeGUI
     */
    public ExcelMergeGUI() {
        initComponents();
        this.jLabel5.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jOptionPane1 = new javax.swing.JOptionPane();
        jDialog2 = new javax.swing.JDialog();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel5 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jTextField4 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jDialog2.setTitle("About");

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ExcelMerger");
        setPreferredSize(new java.awt.Dimension(600, 450));

        jTextField1.setEditable(false);
        jTextField1.setText("Browse Files from here...");
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField1MouseClicked(evt);
            }
        });

        jButton1.setText("Browse..");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Excel Files to merge :");

        jButton2.setText("Submit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setText("jLabel5");

        jTextField6.setEditable(false);
        jTextField6.setText("Select Destination Folder...");
        jTextField6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField6MouseClicked(evt);
            }
        });

        jButton3.setText("Browse..");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Reset");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jCheckBox2.setText("Set Custom Destination");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jLabel12.setText("Enter Destination Cell Name :");

        jTextField8.setEditable(false);

        jLabel11.setText("Enter Source Celll Name(s) :");

        jLabel13.setText("(Multiple Cell Names should be saperated by comma)");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel13)
                        .addGap(308, 308, 308))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(473, 473, 473))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jCheckBox2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField7)
                    .addComponent(jLabel13))
                .addGap(13, 13, 13)
                .addComponent(jCheckBox2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField8))
                .addGap(36, 36, 36))
        );

        jTabbedPane1.addTab("Enter By Cell Name", jPanel2);

        jPanel3.setPreferredSize(new java.awt.Dimension(700, 136));

        jCheckBox1.setText("Set Custom Destination");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jTextField4.setEditable(false);

        jLabel8.setText("Destination Cell Location:");

        jLabel9.setText("Enter Row Number :");

        jLabel10.setText("Enter Column Number :");

        jTextField5.setEditable(false);

        jLabel7.setText("Source Cell Location :");

        jLabel2.setText("Enter Row Number :");

        jLabel3.setText("Enter Column Number :");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jCheckBox1))
                        .addContainerGap(72, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(41, 41, 41))
        );

        jTabbedPane1.addTab("Enter By Cell Destination", jPanel3);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(121, 121, 121)
                                        .addComponent(jButton2)
                                        .addGap(49, 49, 49)
                                        .addComponent(jButton4))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton3)))
                                .addGap(0, 2, Short.MAX_VALUE)))
                        .addContainerGap(13, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jButton1))
                                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 18, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(true);
        FileFilter filter = new FileNameExtensionFilter("Excel Files only...", "xlsx");
        fileChooser.addChoosableFileFilter(filter);
        jProgressBar1.setValue(50);
        jProgressBar1.setStringPainted(true);
        int returnVal = fileChooser.showOpenDialog(jButton1);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File[] file = fileChooser.getSelectedFiles();
            for(int i=0; i<file.length; i++){
                path += file[i].getAbsolutePath()+";";
                System.out.println(path);
            }
            jTextField1.setText(path); 
            jProgressBar1.setValue(100);
            jProgressBar1.repaint();
            jLabel5.setVisible(true);
            jLabel5.setText("File Imported Successfully!!");
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed
          
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jLabel5.setText("Processing....please wait!!");
        //this.fileExceptionTest();
        try {
            if(this.path.equals("")||(this.jTextField6.getText().equals("Select Destination Folder..."))){
                throw new FileNotFoundException();
            }
            //this.fileExceptionTest();
            refineFile(destPath+"\\Result.xls");
            FileInputStream fileIn = new FileInputStream(new File(destPath+"\\Result.xls"));
            HSSFWorkbook workbook =  new HSSFWorkbook(fileIn);;
            if ((this.jTextField7.getText().length()>3||this.jTextField8.getText().length()>3) && (!jTextField7.getText().contains(",")||!jTextField8.getText().contains(","))){
                throw new InvalidCellValueException("Invalid Cell Value");
            }
            if(checkMultipleCellInput(jTextField7.getText())){
                int[] source = getSourceCount();
                int[] destination = getDestinationCount(workbook);
                if(source.length != destination.length){
                    throw new InvalidCellValueException("Invalid Cell Value");
                }
                for (int i=0; i<source.length; ){
                    this.processCells(source[i+1], source[i], destination[i+1], destination[i], workbook);
                    i = i + 2;
                }
            }else{
                int[] source = getSourceCount();
                int[] destination = getDestinationCount(workbook);
                this.processCells(source[1], source[0], destination[1], destination[0], workbook);
            }
            jProgressBar1.setValue(100);
            System.out.println("File Successfully written to : "+destPath+"\\Result.xls");
            jLabel5.setText("File Successfully written to : "+destPath+"\\Result.xls");
            JOptionPane.showMessageDialog(rootPane,"File Operation Successful!!");
            } catch (FileNotFoundException ex) {
                if(this.path.equals("")){
                    JOptionPane.showMessageDialog(rootPane,"Select File First..!!");
                }else if(this.jTextField6.getText().equals("Select Destination Folder...")){
                    JOptionPane.showMessageDialog(rootPane,"Select Destination First..!!");
                }else{
                    JOptionPane.showMessageDialog(rootPane,"File Result.xls is open somewhere\nClose it and try again.");
                    Logger.getLogger(ExcelMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }catch(NumberFormatException ex){
                JOptionPane.showMessageDialog(rootPane,"Enter Correct Values of Cell and Try Again..!!");
                clearCellValues();
                Logger.getLogger(ExcelMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                    Logger.getLogger(ExcelMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidCellValueException ex) {
                Logger.getLogger(ExcelMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane,"Enter Correct Values of Cell and Try Again..!!");
                clearCellValues();
        } /*catch (InvalidCellValueException ex) {
            JOptionPane.showMessageDialog(rootPane,"Enter Correct Values of Cell and Try Again..!!");
            clearCellValues();
            Logger.getLogger(ExcelMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
        }*/
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseClicked
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(true);
        FileFilter filter = new FileNameExtensionFilter("Excel Files only...", "xlsx", "xls");
        fileChooser.addChoosableFileFilter(filter);
        jProgressBar1.setValue(50);
        jProgressBar1.setStringPainted(true);
        path="";
        int returnVal = fileChooser.showOpenDialog(jButton1);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File[] file = fileChooser.getSelectedFiles();
            System.out.println("1");
            for(int i=0; i<file.length; i++){
                path += file[i].getAbsolutePath()+";";
                System.out.println(path);
            }
            jTextField1.setText(path); 
            jProgressBar1.setValue(100);
            jProgressBar1.repaint();
            jLabel5.setVisible(true);
            jLabel5.setText("File Imported Successfully!!");
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_jTextField1MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fileChooser.showOpenDialog(jButton1);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            System.out.println(file.getAbsolutePath());
            jTextField6.setText(file.getAbsolutePath()); 
            this.destPath = file.getAbsolutePath();
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField6MouseClicked
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fileChooser.showOpenDialog(jButton1);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            System.out.println(file.getAbsolutePath());
            jTextField6.setText(file.getAbsolutePath()); 
            this.destPath = file.getAbsolutePath();
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_jTextField6MouseClicked

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        jOptionPane1.showMessageDialog(rootPane, "This utility is developed by :\n1. Rajat Patel\n2. Nikhil Menghani\n\nSpecial Thanks to Kuntesh Jani Sir to guide us.");
        jOptionPane1.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.jTextField1.setEditable(true);
        this.jTextField1.setText("Browse Files from here...");
        this.jTextField1.setEditable(false);
        this.jTextField2.setText("");
        this.jTextField3.setText("");
        if(this.flag1){
            this.jTextField4.setText("");
            this.jTextField5.setText("");
        }
        else{
            this.jTextField4.setEditable(true);
            this.jTextField4.setText("");
            this.jTextField4.setEditable(false);
            this.jTextField5.setEditable(true);
            this.jTextField5.setText("");
            this.jTextField5.setEditable(false);
        }
        this.jTextField6.setEditable(true);
        this.jTextField6.setText("Select Destination Folder...");
        this.jTextField6.setEditable(false);
        this.jLabel5.setText("");
        this.jLabel5.setVisible(false);
        System.out.println("Reset Executed");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        System.out.println("Value of Flag Before: "+this.flag1);
        this.jTextField4.setEditable(!this.flag1);
        this.jTextField5.setEditable(!this.flag1);
        this.flag1=!this.flag1;
        System.out.println("Value of Flag Aft: "+this.flag1);
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
       System.out.println("Value of Flag Before: "+this.flag2);
        this.jTextField8.setEditable(!this.flag2);
        this.jTextField5.setEditable(!this.flag2);
        this.flag2=!this.flag2;
        System.out.println("Value of Flag After: "+this.flag2);
    }//GEN-LAST:event_jCheckBox2ActionPerformed
    public int getNoOfRows(HSSFSheet tempsheet){
    int destRowCount=0;
        for (Row temprow : tempsheet) {
            /*for (Cell tempcell : temprow) {
                destRowCount++;
              }*/
              destRowCount++;
        }
        return destRowCount;
    }
    public void refineFile(String fileName) throws FileNotFoundException, IOException{
        File file=new File(fileName);
        HSSFWorkbook workbook;
            if(file.exists()){
                System.out.println("It already exists");  
            }else{
                System.out.println("It doesnt already exists");
                FileOutputStream tempFOS=new FileOutputStream(file);
                workbook = new HSSFWorkbook();
                workbook.createSheet();
                workbook.write(tempFOS);
                tempFOS.close();
            }
    }
    public HSSFCell createOneOutputCell(int rowDest,int columnDest,HSSFWorkbook workbook){
        HSSFRow row;
        HSSFCell cell;
        int resultRowCount=getNoOfRows(workbook.getSheetAt(0));
        System.out.println("Row: "+rowDest+" Column: "+columnDest+" ResultRowCount "+resultRowCount);
            if(rowDest<=resultRowCount){
                    row = workbook.getSheetAt(0).getRow(rowDest-1);
                    cell = row.createCell(columnDest-1);
                }
                else{
                    row = workbook.getSheetAt(0).createRow(rowDest-1);
                    cell = row.createCell(columnDest-1);
                }
            return cell;
    }
    
    private boolean checkMultipleCellInput(String input){
        if(input.trim().contains(",")){
            return true;
        }else{
            return false;
        }
    }
    
    public int[] getSourceCount(){
        int[] Count = null;
        if(jTextField7.getText().equals("")){
            System.out.println("in if method of getColCount");
            Count[0] = Integer.parseInt(jTextField3.getText());
            Count[1] = Integer.parseInt(jTextField2.getText());
            System.out.println("Col Count is: "+Count);
        }
        if(checkMultipleCellInput(jTextField7.getText())){
            String cellNames = jTextField7.getText();
            String[] cell = cellNames.trim().split(",");
            int Loc[] = new int[cell.length*2];
            int[] temp = new int[2];
            for(int i=0, k=0; i<cell.length*2 && k<cell.length; k++){
                System.out.println(cell[k]);
                temp = getCellLocation(cell[k]);
                Loc[i] = temp[0];
                Loc[i+1] = temp[1];
                i = i+2;
            }
            Count = Loc;
            System.out.println("Output array length = "+Count.length);
        }else{
            System.out.println("in else method of getColCount");
            String cellName = jTextField7.getText();
            int Loc[] = getCellLocation(cellName);
            Count= Loc;
            System.out.println("Col Count is: "+Count);
        }
        return Count;
    }
    
    public int[] getDestinationCount(HSSFWorkbook workbook){
        int[] Count = null;
        if(this.flag1){
                Count[1] = Integer.parseInt(jTextField4.getText());
                Count[0] = Integer.parseInt(jTextField5.getText());
            }
        else if(this.flag2){
            String cName = jTextField8.getText();
            if(checkMultipleCellInput(cName)){
                String[] cell = cName.trim().split(",");
                int Loc[] = new int[cell.length*2];
                int temp[] = new int[2];
                for(int i=0, k=0; i<cell.length*2 && k<cell.length; k++){
                    System.out.println(cell[k]);
                    temp = getCellLocation(cell[k]);
                    Loc[i] = temp[0];
                    Loc[i+1] = temp[1];
                    i = i+2;
                }
                Count = Loc;
            }else{
                int Loc[] = getCellLocation(cName);
                Count = Loc;
            }
        }else{
            if(checkMultipleCellInput(jTextField7.getText())){
                int destRowCount=getNoOfRows(workbook.getSheetAt(0));
                int cellCount = jTextField7.getText().trim().split(",").length;
                int Loc[] = new int[cellCount*2];
                for(int i=0, k=1; i<cellCount*2 && k<=cellCount; k++){
                    Loc[i] = k;
                    Loc[i+1] = destRowCount+1;
                    System.out.println("Destination count latest : "+Loc[i]+" "+Loc[i+1]);
                    i = i + 2;
                    
                }
                Count = Loc;
            }else{
                int destRowCount=getNoOfRows(workbook.getSheetAt(0));
                Count = new int[2];
                Count[1]=destRowCount+1;
                Count[0]=1;
            }
            
        }
        return Count;
    }
    public void clearCellValues(){
        this.jTextField2.setText("");
        this.jTextField3.setText("");
        this.jTextField7.setText("");
        this.jTextField8.setText("");
        if(this.flag){
            this.jTextField4.setText("");
            this.jTextField5.setText("");
        }
        else{
           this.jTextField4.setEditable(true);
           this.jTextField4.setText("");
           this.jTextField4.setEditable(false);
           this.jTextField5.setEditable(true);
           this.jTextField5.setText("");
           this.jTextField5.setEditable(false);
       }
    }
    public void fileExceptionTest(){
        try {
            if(this.path.equals("")||(this.jTextField6.getText().equals("Select Destination Folder..."))){
                throw new FileNotFoundException();
            }
        }catch (FileNotFoundException ex) {
            if(this.path.equals("")){
                JOptionPane.showMessageDialog(rootPane,"Select File First..!!");
            }
            else if(this.jTextField6.getText().equals("Select Destination Folder...")){
                JOptionPane.showMessageDialog(rootPane,"Select Destination First..!!");
            }
        }
    }
    private void processCells(int rowSrc, int columnSrc,int rowDest, int columnDest, HSSFWorkbook workbook) throws FileNotFoundException, IOException{
        FileOutputStream fileOut = new FileOutputStream(new File(destPath+"\\Result.xls"));
        HSSFCell cell;
        jProgressBar1.setValue(10);
        jProgressBar1.setStringPainted(true);
        filePaths = path.split(";");
        FileInputStream file;
        XSSFWorkbook inputWorkbook;
        for(int i=0; i<this.filePaths.length; i++){
            System.out.println(filePaths[i]);
            jProgressBar1.setValue((i+1)*10);
            try {
                file = new FileInputStream(new File(filePaths[i]));
                inputWorkbook = new XSSFWorkbook(file);
                XSSFRow rowId = inputWorkbook.getSheetAt(0).getRow(rowSrc-1);
                XSSFCell cellID = rowId.getCell(columnSrc-1);
                jProgressBar1.setValue((i+1)*10+10);
                switch(cellID.getCellType()){
                    case XSSFCell.CELL_TYPE_STRING:
                        cell=createOneOutputCell(rowDest++,columnDest,workbook);
                        cell.setCellValue(cellID.getStringCellValue());
                        break;
                    case XSSFCell.CELL_TYPE_NUMERIC:
                        cell=createOneOutputCell(rowDest++,columnDest,workbook);
                        cell.setCellValue(cellID.getNumericCellValue());
                        break;
                }
                file.close();
                jProgressBar1.setValue((i+1)*10+20);
            }catch (FileNotFoundException ex) {
                    Logger.getLogger(ExcelMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ExcelMergeGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        workbook.write(fileOut);
        fileOut.close();
        jProgressBar1.setValue(70);
    }
    private int[] getCellLocation(String cell) throws ArrayIndexOutOfBoundsException{
        int tempColLoc = 0;
        int[] locations = new int[2];
        String cellName = cell.trim().toUpperCase();
        String[] splitStrings = cellName.split("(?<=\\D)(?=\\d)|(?<=\\d)(?=\\D)");
        char[] charArray = splitStrings[0].toCharArray();
        int temp[] = new int[charArray.length];
        for (int j=0; j<charArray.length; j++){
            temp[j] = ((int)charArray[j])-64;
            System.out.println(temp[j]);
        }
        for (int i=0; i<charArray.length; i++){
            if(i==0)tempColLoc = temp[i];
            if(i==1)tempColLoc += temp[i+1]*26;
            if(i==2)tempColLoc += temp[i+2]*26;
            System.out.println(tempColLoc);
        }
        locations[1] = Integer.parseInt(splitStrings[1]);
        System.out.println("Column : "+ tempColLoc +"row :"+locations[1]);
        locations[0] = tempColLoc;
        return locations;
    }
    
    private void reset(){
        this.destPath = "";
        this.path = "";
        this.rowCount = 0;
        this.columnCount = 0;
        this.filePaths = null;
        this.flag1 = false;
        this.flag2 = false;
        this.jProgressBar1.setValue(0);
        this.jTextField1.setEditable(true);
        this.jTextField1.setText("Browse Files from here...");
        this.jTextField1.setEditable(false);
        this.jTextField2.setText("");
        this.jTextField3.setText("");
        if(this.flag1){
            this.jTextField4.setText("");
            this.jTextField5.setText("");
        }else if(this.flag2){
            this.jTextField8.setText("");
        }
        else{
            this.jTextField4.setEditable(true);
            this.jTextField4.setText("");
            this.jTextField4.setEditable(false);
            this.jTextField5.setEditable(true);
            this.jTextField5.setText("");
            this.jTextField5.setEditable(false);
            this.jTextField8.setEditable(true);
            this.jTextField8.setText("");
            this.jTextField8.setEditable(false);
        }
        this.jTextField6.setEditable(true);
        this.jTextField6.setText("Select Destination Folder...");
        this.jTextField6.setEditable(false);
        this.jTextField7.setText("");
        this.jLabel5.setText("");
        this.jLabel5.setVisible(false);
        System.out.println("Reset Executed");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExcelMergeGUI().setVisible(true);
            }
        });
    }
    boolean flag=false;
    private String destPath = "";
    private String path = "";
    private int rowCount;
    private int columnCount;
    private String[] filePaths;
    private boolean flag1=false;
    private boolean flag2=false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables
}
